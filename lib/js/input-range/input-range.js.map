{"version":3,"sources":["../../../src/js/input-range/input-range.jsx"],"names":["valueTransformer","InputRange","allowSameValues","PropTypes","bool","ariaLabelledby","string","ariaControls","classNames","objectOf","disabled","draggableTrack","formatLabel","func","maxValue","rangePropType","minValue","name","onChangeStart","onChange","isRequired","onChangeComplete","step","number","value","valuePropType","DEFAULT_CLASS_NAMES","props","startValue","nodeRef","React","createRef","trackNodeRef","isSliderDragging","lastKeyMoved","removeDocumentMouseUpListener","removeDocumentTouchEndListener","inputRange","disabledInputRange","trackNode","current","getClientRect","position","values","getValueFromProps","isMultiValue","positions","getPositionsFromValues","getTrackClientRect","distanceToMin","min","distanceToMax","max","e","p","Math","round","currentValues","precision","getStepPrecision","isWithinRange","hasStepDifference","key","updatePositions","getValueFromPosition","transformedValues","getStepValueFromValue","updateValues","shouldUpdate","updateValue","node","ownerDocument","addEventListener","handleMouseUp","handleTouchEnd","removeEventListener","event","getPositionFromEvent","requestAnimationFrame","updatePosition","prevEvent","stepValue","prevPosition","prevValue","prevStepValue","offset","keyCode","LEFT_ARROW","DOWN_ARROW","preventDefault","decrementValue","RIGHT_ARROW","UP_ARROW","incrementValue","getKeyByPosition","handleInteractionStart","handleInteractionEnd","addDocumentMouseUpListener","addDocumentTouchEndListener","percentages","getPercentagesFromValues","keys","getKeys","reverse","map","percentage","slider","handleSliderDrag","handleSliderKeyDown","componentClassName","getComponentClassName","handleKeyDown","handleKeyUp","handleMouseDown","handleTouchStart","handleTrackDrag","handleTrackMouseDown","renderSliders","renderHiddenInputs","Component","autobind"],"mappings":"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","file":"input-range.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      allowSameValues: PropTypes.bool,\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      allowSameValues: false,\n      classNames: DEFAULT_CLASS_NAMES,\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {boolean} [props.allowSameValues]\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.nodeRef = React.createRef();\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNodeRef = React.createRef();\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.lastKeyMoved = null;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      return this.props.classNames.inputRange;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    const trackNode = this.trackNodeRef.current;\n    if (trackNode) {\n      return trackNode.getClientRect();\n    }\n\n    return {};\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const positions = valueTransformer.getPositionsFromValues(\n      values,\n      this.props.minValue,\n      this.props.maxValue,\n      this.getTrackClientRect()\n    );\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * Return numerical precision of the step value\n   * @private\n   * @return {number}\n   */\n  getStepPrecision() {\n    const step = this.props.step;\n    let e = 1;\n    let p = 0;\n    while (Math.round(step * e) / e !== step) {\n      e *= 10;\n      p += 1;\n    }\n    return p;\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const precision = this.getStepPrecision();\n    return (\n      length(values.min, currentValues.min, precision) >= this.props.step ||\n      length(values.max, currentValues.max, precision) >= this.props.step\n    );\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n        values.max <= this.props.maxValue &&\n        this.props.allowSameValues\n        ? values.min <= values.max\n        : values.min < values.max;\n    }\n\n    return (\n      values.max >= this.props.minValue && values.max <= this.props.maxValue\n    );\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const positions = valueTransformer.getPositionsFromValues(\n      values,\n      this.props.minValue,\n      this.props.maxValue,\n      this.getTrackClientRect()\n    );\n\n    positions[key] = position;\n    this.lastKeyMoved = key;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(\n        positions.min,\n        this.props.minValue,\n        this.props.maxValue,\n        this.getTrackClientRect()\n      ),\n      max: valueTransformer.getValueFromPosition(\n        positions.max,\n        this.props.minValue,\n        this.props.maxValue,\n        this.getTrackClientRect()\n      )\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(\n        values.min,\n        this.props.step,\n        this.props.minValue,\n        this.props.maxValue\n      ),\n      max: valueTransformer.getStepValueFromValue(\n        values.max,\n        this.props.step,\n        this.props.minValue,\n        this.props.maxValue\n      )\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    const node = this.nodeRef.current;\n    if (node) {\n      node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n    }\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    const node = this.nodeRef.current;\n    if (node) {\n      node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n    }\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    const node = this.nodeRef.current;\n    if (node) {\n      node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    const node = this.nodeRef.current;\n    if (node) {\n      node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n    }\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(\n      event,\n      this.getTrackClientRect()\n    );\n    this.isSliderDragging = true;\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (\n      this.props.disabled ||\n      !this.props.draggableTrack ||\n      this.isSliderDragging\n    ) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min }\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(\n      event,\n      this.getTrackClientRect()\n    );\n    const value = valueTransformer.getValueFromPosition(\n      position,\n      minValue,\n      maxValue,\n      this.getTrackClientRect()\n    );\n    const stepValue = valueTransformer.getStepValueFromValue(\n      value,\n      this.props.step,\n      this.props.minValue,\n      this.props.maxValue\n    );\n\n    const prevPosition = valueTransformer.getPositionFromEvent(\n      prevEvent,\n      this.getTrackClientRect()\n    );\n    const prevValue = valueTransformer.getValueFromPosition(\n      prevPosition,\n      minValue,\n      maxValue,\n      this.getTrackClientRect()\n    );\n    const prevStepValue = valueTransformer.getStepValueFromValue(\n      prevValue,\n      this.props.step,\n      this.props.minValue,\n      this.props.maxValue\n    );\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n      case DOWN_ARROW:\n        event.preventDefault();\n        this.decrementValue(key);\n        break;\n\n      case RIGHT_ARROW:\n      case UP_ARROW:\n        event.preventDefault();\n        this.incrementValue(key);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min }\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(\n      position,\n      minValue,\n      maxValue,\n      this.getTrackClientRect()\n    );\n    const stepValue = valueTransformer.getStepValueFromValue(\n      value,\n      this.props.step,\n      this.props.minValue,\n      this.props.maxValue\n    );\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const percentages = valueTransformer.getPercentagesFromValues(\n      values,\n      this.props.minValue,\n      this.props.maxValue\n    );\n    const keys =\n      this.props.allowSameValues && this.lastKeyMoved === 'min'\n        ? this.getKeys().reverse()\n        : this.getKeys();\n\n    return keys.map(key => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value}\n        />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map(key => {\n      const value = values[key];\n      const name = isMultiValue\n        ? `${this.props.name}${captialize(key)}`\n        : this.props.name;\n\n      return <input key={key} type=\"hidden\" name={name} value={value} />;\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(\n      this.props,\n      this.isMultiValue()\n    );\n    const percentages = valueTransformer.getPercentagesFromValues(\n      values,\n      this.props.minValue,\n      this.props.maxValue\n    );\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={this.nodeRef}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n      >\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\"\n        >\n          {this.props.minValue}\n        </Label>\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          ref={this.trackNodeRef}\n          percentages={percentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}\n        >\n          {this.renderSliders()}\n        </Track>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\"\n        >\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n"]}